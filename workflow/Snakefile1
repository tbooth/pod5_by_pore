# vim: ft=python
"""Snakefile to re-sort POD files by channel.
   Useful for duplex calling.
"""
from collections import defaultdict
import json

INPUT_DIR  = config.get('input_dir', "pod5")
WORK_DIR   = config.get('work_dir',   INPUT_DIR + ".tmp")
OUTPUT_DIR = config.get('output_dir', INPUT_DIR + ".out")

# For testing:
INPUT_DIR  = "/lustre-gseg/promethion/prom_runs/2023/20231107_MIN2_26171SS/26171SS0001L02/20231108_1411_MN32284_AOZ898_35873099/pod5_pass"
WORK_DIR   = "tmp"
OUTPUT_DIR = "out"

def list_all_channels(wc=None):
    all_pod5 = glob_wildcards(INPUT_DIR + "/{p5}.pod5")

    return [ f"{WORK_DIR}/{p5}.pod5.channels" for p5 in all_pod5.p5 ]

rule main:
    input: "channels_in_use.json"

# For testing
localrules: get_channels_txt

rule get_channels_txt:
    output: WORK_DIR + "/{foo}.pod5.channels"
    input:  INPUT_DIR + "/{foo}.pod5"
    conda:  "envs/pod5.yaml"
    shell:
        "pod5 view -H {input} -i read_id,channel > {output}"

rule get_channels_in_use:
    output: "channels_in_use.json"
    input:  list_all_channels
    run:
        # "cut -d, -f 1 {input} | sort -u > {output}"
        # Save channel -> pod5_files dict as json
        res = defaultdict(set)
        for f in input:
            f_base = re.match(r"/(\w+\.pod5)\.channels$", f).group(1)
            with open(f) as fh:
                for read_id, channel in (l.split() for l in fh):
                    res[channel].add(f_base)

        # Sets to lists
        with open(str(output)) as ofh:
            json.dump( {k: sorted(v) for k, v in res.items()},
                       fp = ofh,
                       sort_keys = True )

